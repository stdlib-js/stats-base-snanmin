{
  "version": 3,
  "sources": ["../lib/snanmin.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isNegativeZerof = require( '@stdlib/math-base-assert-is-negative-zerof' );\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a single-precision floating-point strided array, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} minimum value\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snanmin( N, x, 1 );\n* // returns -2.0\n*/\nfunction snanmin( N, x, stride ) {\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZerof( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nmodule.exports = snanmin;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isNegativeZerof = require( '@stdlib/math-base-assert-is-negative-zerof' );\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of a single-precision floating-point strided array, ignoring `NaN` values.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} minimum value\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snanmin( N, x, 2, 1 );\n* // returns -2.0\n*/\nfunction snanmin( N, x, stride, offset ) {\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmin = v;\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( v < min || ( v === min && isNegativeZerof( v ) ) ) {\n\t\t\tmin = v;\n\t\t}\n\t}\n\treturn min;\n}\n\n\n// EXPORTS //\n\nmodule.exports = snanmin;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar snanmin = require( './snanmin.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( snanmin, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = snanmin;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum value of a single-precision floating-point strided array, ignoring `NaN` values.\n*\n* @module @stdlib/stats-base-snanmin\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var snanmin = require( '@stdlib/stats-base-snanmin' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snanmin( N, x, 1 );\n* // returns -2.0\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var snanmin = require( '@stdlib/stats-base-snanmin' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snanmin.ndarray( N, x, 2, 1 );\n* // returns -2.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar snanmin;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsnanmin = main;\n} else {\n\tsnanmin = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = snanmin;\n\n// exports: { \"ndarray\": \"snanmin.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAkB,QAAS,4CAA6C,EAsB5E,SAASC,EAASC,EAAGC,EAAGC,EAAS,CAChC,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKN,GAAK,EACT,MAAO,KAER,GAAKA,IAAM,GAAKE,IAAW,EAC1B,OAAOD,EAAG,CAAE,EAOb,IALKC,EAAS,EACbE,GAAM,EAAEJ,GAAKE,EAEbE,EAAK,EAEAE,EAAI,EAAGA,EAAIN,IAChBK,EAAIJ,EAAGG,CAAG,EACLC,IAAMA,GAFQC,IAKnBF,GAAMF,EAEP,GAAKI,IAAMN,EACV,MAAO,KAIR,IAFAG,EAAME,EACNC,GAAK,EACCA,EAAGA,EAAIN,EAAGM,IACfF,GAAMF,EACNG,EAAIJ,EAAGG,CAAG,EACL,CAAAP,EAAQQ,CAAE,IAGVA,EAAIF,GAASE,IAAMF,GAAOL,EAAiBO,CAAE,KACjDF,EAAME,GAGR,OAAOF,CACR,CAKAP,EAAO,QAAUG,IC1FjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAkB,QAAS,4CAA6C,EAwB5E,SAASC,EAASC,EAAGC,EAAGC,EAAQC,EAAS,CACxC,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,MAAO,KAER,GAAKA,IAAM,GAAKE,IAAW,EAC1B,OAAOD,EAAGE,CAAO,EAGlB,IADAE,EAAKF,EACCI,EAAI,EAAGA,EAAIP,IAChBM,EAAIL,EAAGI,CAAG,EACLC,IAAMA,GAFQC,IAKnBF,GAAMH,EAEP,GAAKK,IAAMP,EACV,MAAO,KAIR,IAFAI,EAAME,EACNC,GAAK,EACCA,EAAGA,EAAIP,EAAGO,IACfF,GAAMH,EACNI,EAAIL,EAAGI,CAAG,EACL,CAAAR,EAAQS,CAAE,IAGVA,EAAIF,GAASE,IAAMF,GAAON,EAAiBQ,CAAE,KACjDF,EAAME,GAGR,OAAOF,CACR,CAKAR,EAAO,QAAUG,ICxFjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAU,IACVC,EAAU,IAKdF,EAAaC,EAAS,UAAWC,CAAQ,EAKzCH,EAAO,QAAUE,ICejB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAUD,EAEVC,EAAUC,EAMX,OAAO,QAAUD",
  "names": ["require_snanmin", "__commonJSMin", "exports", "module", "isnanf", "isNegativeZerof", "snanmin", "N", "x", "stride", "min", "ix", "v", "i", "require_ndarray", "__commonJSMin", "exports", "module", "isnanf", "isNegativeZerof", "snanmin", "N", "x", "stride", "offset", "min", "ix", "v", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "snanmin", "ndarray", "join", "tryRequire", "isError", "main", "snanmin", "tmp"]
}
